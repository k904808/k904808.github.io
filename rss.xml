<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kay Log]]></title><description><![CDATA[:)]]></description><link>https://k904808.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Tue, 11 Feb 2020 13:20:08 GMT</lastBuildDate><item><title><![CDATA[크롤링..]]></title><description><![CDATA[깃허브 관련 명령어 정리]]></description><link>https://k904808.github.io//posts/2020_02_11</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_11</guid><pubDate>Tue, 11 Feb 2020 22:15:30 GMT</pubDate><content:encoded>&lt;h2 id=&quot;크롤링-삽질의-기록-🤬🤯&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%A4%EB%A7%81-%EC%82%BD%EC%A7%88%EC%9D%98-%EA%B8%B0%EB%A1%9D-%F0%9F%A4%AC%F0%9F%A4%AF&quot; aria-label=&quot;크롤링 삽질의 기록 🤬🤯 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크롤링.. 삽질의 기록… 😠😡🤬🤯&lt;/h2&gt;
&lt;p&gt;크롤링에 앞서 가상환경을 만들고 활성화해준다.
miniconda를 기준으로, 새로운 가상환경은 아래 명령어로 만들 수 있다.
&lt;code class=&quot;language-text&quot;&gt;conda create -n 가상환경 이름 python=3.8&lt;/code&gt;
❗️ 파이썬 버전을 명시하지 않으면 자동으로 2.x 버전이 설치되므로 주의&lt;/p&gt;
&lt;p&gt;가상환경이 활성화 된 상태에서 bs4 request를 설치해준다.
&lt;code class=&quot;language-text&quot;&gt;pip install bs4, request&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;✔️ 동기님이 알려주신 가상환경 활성화 + 프로젝트 디렉토리 이동 꿀팁
&lt;img src=&quot;https://images.velog.io/images/k904808/post/cebfbf2f-21d2-41b1-873a-23d8412816f9/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-02-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.18.57.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;터미널에서 “scrap”이라는 명령어를 입력하면, scrap이라는 가상환경을 활성화 한 후 scrap 디렉토리로 이동하도록 설정해두었다. ‘.zshrc’ 에서 alias 이용해 원하는 명령어와 원하는 동작을 미리 설정해두는 방법. 진짜 편함.🤩&lt;/p&gt;
&lt;p&gt;다음으로, 프로젝트 디렉토리에 새로운 파일을 생성한다.
새로운 파일을 생성하는 방법은 크게 두 가지가 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vi 새로운파일.py&lt;/code&gt; :
명령어를 입력하면 새로운파일 이름으로 에디터가 열린다.
그 화면에서 바로 편집하고 저장하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;touch 새로운파일.py&lt;/code&gt;:
새로운 파일이 생성된다.
에디터로 열어서 편집 후 저장하면 된다.&lt;/p&gt;
&lt;p&gt;새로운 파일에 request와 bs4를 import 해준다.
그리고 리퀘스트를 잘 찍어서 숩에 담아서 잘 가져온다. ㅋㅋㅋㅋ 말은 쉽다..ㅋㅋㅋㅋ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import requests
from bs4 import BeautifulSoup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;req = requests.get(&amp;#39;https:// #크롤링할 url)

html = req.text                            #request를 텍스트 형식으로 바꿔줌

soup = BeautifulSoup(html, &amp;#39;html.parser&amp;#39;)  #텍스트를 사람이 보기좋은 상태로 가공해 줌.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각 과정에서 데이터가 잘 따라오는지 알아보려면 print 해보는게 제일..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/k904808/post/5a1dc8d3-3a65-48e7-b227-76b2212a7c6f/image.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;변수1 = soup.select(
	#개발자 도구를 통해 긁어온 css selector
)
변수2 = soup.select(
	#개발자 도구를 통해 긁어온 css selector
)
변수3 = soup.select(
	#개발자 도구를 통해 긁어온 css selector
)

빈_chart = []
for item in zip(변수1, 변수2, 변수3):
    빈_chart.append(
        {
            &amp;#39;변수1&amp;#39;  : item[0].text,
            &amp;#39;변수2&amp;#39;  : item[1].text,
            &amp;#39;변수3&amp;#39;: item[2].text,
        }
    )
    for i in 빈_chart:     #이제는 안 비었지만..
        print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 크롤링 완료.
끝.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github에 소스코드 올리기]]></title><description><![CDATA[깃허브 관련 명령어 정리]]></description><link>https://k904808.github.io//posts/2020_02_06</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_06</guid><pubDate>Thu, 06 Feb 2020 18:14:15 GMT</pubDate><content:encoded>&lt;h3 id=&quot;git과-github&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git%EA%B3%BC-github&quot; aria-label=&quot;git과 github permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git과 Github&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Repository 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github에 소스코드를 올리려면 먼저 github 홈페이지에서 repository를 생성해야 한다. 이때 생긴 repository를 remote repository라고 한다.&lt;/p&gt;
&lt;p&gt;내 pc에서 업로드할 소스코드가 있는 디렉토리로 이동한 뒤, 아래의 명령어로 local repository를 생성한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git init&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;상태확인&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git status&lt;/code&gt;
명령어가 동작하지 않을 때 에러를 확인 할 수 있고, 작업한 파일 이외에 다른 파일이 수정되지 않았는지 확인할 수 있다.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;add&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git add .&lt;/code&gt;
하위 디렉토리에 있는 모든 변경 파일을 local repository에 추가하는 명령어.
” . ” 대신에 파일명을 입력하면 특정 파일을 추가할 수 있다.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;commit 메세지 작성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git commit -m &amp;quot;메세지내용&amp;quot;&lt;/code&gt;
-m은 한 줄로 간단하게 메세지를 작성할 때 사용하는 옵션.
긴 커밋메세지를 남길 경우에는 &lt;code class=&quot;language-text&quot;&gt;$git commit&lt;/code&gt; 명령어만 실행하면 된다.&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;remote repository 등록
&lt;code class=&quot;language-text&quot;&gt;$git remote add origin &amp;quot;remote repository 주소&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;연결상태를 확인하고 싶을 때는 아래 명령어를 입력하면 된다.
&lt;code class=&quot;language-text&quot;&gt;$git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;혹시 연결이 잘못 되었거나, 다른 remote repository로 변경하고 싶은 경우,
&lt;code class=&quot;language-text&quot;&gt;git remote set-url &amp;quot;변경할 이름&amp;quot; &amp;quot;새로운 url주소&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git push origin master&lt;/code&gt;
commit한 내용을 remote repository에 업로드 하는 것을 push한다고 한다.
master는 브랜치 이름이며, 다른 브랜치로 push하고 싶은 경우 master를 특정 브랜치 이름으로 바꿔서 실행하면 된다.&lt;/p&gt;
&lt;p&gt;새로운 브랜치 생성
&lt;code class=&quot;language-text&quot;&gt;$git branch &amp;quot;생성할 브랜치 이름&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;브랜치 이동
&lt;code class=&quot;language-text&quot;&gt;$git checkout &amp;quot;브랜치 이름&amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;push의 반대 개념으로 &lt;code class=&quot;language-text&quot;&gt;$git clone &amp;quot;repository 주소&amp;quot;&lt;/code&gt;를 통해 원하는 파일을 다운로드 할 수도 있다.&lt;/p&gt;</content:encoded></item></channel></rss>