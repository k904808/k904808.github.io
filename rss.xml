<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kay Log]]></title><description><![CDATA[:)]]></description><link>https://k904808.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 15 Feb 2020 15:56:29 GMT</lastBuildDate><item><title><![CDATA[인증(Authentication) & 인가(Authorization)-2]]></title><description><![CDATA[인증(Authentication) & 인가(Authorization)-2]]></description><link>https://k904808.github.io//posts/2020_02_14</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_14</guid><pubDate>Invalid Date</pubDate><content:encoded>&lt;p&gt;JWT(JSON Web Tokens)
유저가 로그인에 성공하면 access token 이라는 암호화된 유저 정보를 첨부해서 request를 보낸다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP/1.1 200 OK
Content-Type: application/json

{
    &amp;quot;access_token&amp;quot;: &amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZGVudGl0eSI6MSwiaWF0IjoxNDQ0OTE3NjQwLCJuYmYiOjE0NDQ5MTc2NDAsImV4cCI6MTQ0NDkxNzk0MH0.KPmI6WSjRjlpzecPvs3q_T3cJQvAgJvaQAPtk1abC_E&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;서버에서는 access token을 복호화해서 해당 유저정보를 얻게된다.&lt;br&gt;
이러한 절차의 목적은 해당 유저가 요청할 때마다 로그인하지 않아도 되도록 하는 것.&lt;br&gt;
access token을 생성하는 방법은 여러가지가 있는데, 그중 이번에 다루는 것은 JWT이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import jwt
&amp;gt;&amp;gt;&amp;gt; jwt.encode({&amp;#39;user_id&amp;#39;: 1}, &amp;#39;wecode&amp;#39;, algorithm = &amp;#39;HS256&amp;#39;)
b&amp;#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxfQ.DHk2kqJnk-mJg-7xcN4NwkaFJRUh01K3vY2V6g8o3bE&amp;#39;
&amp;gt;&amp;gt;&amp;gt; token = jwt.encode({&amp;#39;user_id&amp;#39;: 1}, &amp;#39;wecode&amp;#39;, algorithm = &amp;#39;HS256&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; jwt.decode(token, &amp;#39;wecode&amp;#39;, algorithm = &amp;#39;HS256&amp;#39;)
{&amp;#39;user_id&amp;#39;: 1}
&amp;gt;&amp;gt;&amp;gt; token = jwt.encode({&amp;#39;user_id&amp;#39;: 1}, &amp;#39;wecode&amp;#39;, algorithm = &amp;#39;HS512&amp;#39;)
&amp;gt;&amp;gt;&amp;gt; print(token)
b&amp;#39;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJ1c2VyX2lkIjoxfQ.ZacrrpzNICXDuHinVYF6aPT5QjaH_zAbH7ihSSUDrMwCUBd1FdxLql5CFWSXt5BNC6P4APTUn-0BrDUowoSqjw&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[인증(Authentication) & 인가(Authorization)-1]]></title><description><![CDATA[인증(Authentication) & 인가(Authorization)-1]]></description><link>https://k904808.github.io//posts/2020_02_13</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_13</guid><pubDate>Thu, 13 Feb 2020 23:51:33 GMT</pubDate><content:encoded>&lt;p&gt;인증(Authentication)
유저의 아이디와 패스워드를 확인하는 절차.&lt;/p&gt;
&lt;p&gt;-회원가입
유저 아이디와 패스워드 생성
유저 패스워드 암호화해서 DB 저장&lt;/p&gt;
&lt;p&gt;-로그인
아이디와 패스워드를 입력
유저가 입력한 패스워드와 DB에 저장된 암호화한 패스워드 비교
일치하면 로그인 성공&lt;/p&gt;
&lt;p&gt;-access token
로그인에 성공하면 access token을 클라이언트에게 전송
유저는 로그인 성공 후부터 request에 access token을 첨부해서 서버에 전송
&lt;br&gt;(매번 로그인 하지 않기 위함.)&lt;/p&gt;
&lt;p&gt;패스워드 암호화
DB 해킹이나, 내부 인력이 유저의 패스워드이 있을 수 있으므로 패스워드는 반드시 암호화해서 저장해야함.&lt;/p&gt;
&lt;p&gt;단방향 암호화 : 복호화가 어려움
양방향 암호화 : 대칭키 알고리즘 적용, 복호화 (다시 풀어서 보기)는 편함.  ex. 주민등록번호&lt;/p&gt;
&lt;p&gt;암호화는 오픈소스 라이브러리 bcrypt 사용&lt;/p&gt;
&lt;p&gt;&amp;#x3C;암호화 한 뒤 DB 저장&gt;
str - 인코딩- bytes - 해싱 - salting - (해싱 12번 반복) - 디코딩 -str 상태로 DB에 저장&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; password = &amp;#39;1234&amp;#39;
&amp;gt;&amp;gt;&amp;gt; a = password.encode()
&amp;gt;&amp;gt;&amp;gt; print(a)
b&amp;#39;1234&amp;#39;
&amp;gt;&amp;gt;&amp;gt; b = bcrypt.hashpw(a, bcrypt.gensalt())
&amp;gt;&amp;gt;&amp;gt; print(b)
b&amp;#39;$2b$12$cX1nZKeM2prdi5mAs8pzzu6BJshHinfOypMmrbrWoY9N8RnmVTjmW&amp;#39;
&amp;gt;&amp;gt;&amp;gt; c = b.decode()
&amp;gt;&amp;gt;&amp;gt; print(c)
$2b$12$cX1nZKeM2prdi5mAs8pzzu6BJshHinfOypMmrbrWoY9N8RnmVTjmW&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;#x3C;DB에 저장된 데이터와 유저가 입력한 패스워드 비교&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;&amp;gt;&amp;gt; d = &amp;#39;1234&amp;#39; #유저가 입력한 패스워드
&amp;gt;&amp;gt;&amp;gt; bcrypt.checkpw(d.encode(&amp;#39;utf-8&amp;#39;),c) #둘다 bytes 상태가 아니면 오류 발생하므로 주의!
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/Users/kay/miniconda3/envs/auth/lib/python3.8/site-packages/bcrypt/__init__.py&amp;quot;, line 100, in checkpw
    raise TypeError(&amp;quot;Unicode-objects must be encoded before checking&amp;quot;)
TypeError: Unicode-objects must be encoded before checking
&amp;gt;&amp;gt;&amp;gt; bcrypt.checkpw(d.encode(&amp;#39;utf-8&amp;#39;),c.encode())
True #DB에 저장된 패스워드와 유저가 입력한 패스워드가 같으면 True 반환
&amp;gt;&amp;gt;&amp;gt; print(c.encode())
b&amp;#39;$2b$12$cX1nZKeM2prdi5mAs8pzzu6BJshHinfOypMmrbrWoY9N8RnmVTjmW&amp;#39;
&amp;gt;&amp;gt;&amp;gt; print(d.encode())
b&amp;#39;1234&amp;#39;
&amp;gt;&amp;gt;&amp;gt; c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Git과 Github]]></title><description><![CDATA[깃과 깃허브, 브랜치 관련 개념 정리]]></description><link>https://k904808.github.io//posts/2020_02_12</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_12</guid><pubDate>Wed, 12 Feb 2020 19:21:34 GMT</pubDate><content:encoded>&lt;h3 id=&quot;git과-githhub&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git%EA%B3%BC-githhub&quot; aria-label=&quot;git과 githhub permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git과 Githhub&lt;/h3&gt;
&lt;h4 id=&quot;git--version-control-system&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git--version-control-system&quot; aria-label=&quot;git  version control system permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git : Version Control System&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;코드의 변경사항 기록, 관리&lt;/li&gt;
&lt;li&gt;필요시 이전 상태로 rollback 할 수 있음&lt;/li&gt;
&lt;li&gt;팀단위 개발 시 체계적, 효과적 협업&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;distributed-version-control-system--분산-버전-관리-시스템&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#distributed-version-control-system--%EB%B6%84%EC%82%B0-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C&quot; aria-label=&quot;distributed version control system  분산 버전 관리 시스템 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Distributed Version Control System : 분산 버전 관리 시스템&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;중앙서버 뿐만 아니라 각 개발자의 컴퓨터에도 최신 버전의 코드, 수정사항 내역, meta 정보를 전부 가지고있는 방식.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;github--git의-중앙서버&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#github--git%EC%9D%98-%EC%A4%91%EC%95%99%EC%84%9C%EB%B2%84&quot; aria-label=&quot;github  git의 중앙서버 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github : Git의 중앙서버&lt;/h4&gt;
&lt;p&gt;❗️모든 작업은 local(내 pc)에서 일어남.
&lt;br&gt;
❗️문제가 생겨도 내 pc에서 생김. conflict도 내 pc에서만 생김. (다른 개발자들에게 영향 X)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clone : 처음 작업을 시작할 때 다운로드&lt;/li&gt;
&lt;li&gt;pull : 최신 코드를 다운로드&lt;/li&gt;
&lt;li&gt;push : 내 코드를 업로드&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;local-repository&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#local-repository&quot; aria-label=&quot;local repository permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Local repository&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/k904808/post/de304989-138e-44d1-b816-e0e38762a0d6/image.png&quot;&gt;
이미지 출처 : &lt;a href=&quot;https://neurathsboat.blog/post/git-intro/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://neurathsboat.blog/post/git-intro/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;⚠️ commit, push 하기 전에 파일을 제대로 올렸는지, 코드가 제대로 돌아가는지 반드시 확인 필요.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git diff&lt;/code&gt; / &lt;code class=&quot;language-text&quot;&gt;$git status&lt;/code&gt; 로 확인하고 커밋 해야함.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;git-brach의-종류&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git-brach%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;git brach의 종류 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git Brach의 종류&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Gitflow에서는 항상 유지되는 메인 브랜치(master, develop)과 일정기간 동안만 유지되는 보조 브랜치(feature, release, hotfix) 총 5가지가 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/k904808/post/436df1ec-5dd5-4e88-b77d-5917fc18d898/image.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;master : 배포(release)이력을 관리하기 위해 사용. 배포가능한 상태만 관리.&lt;/li&gt;
&lt;li&gt;develop : 기능 개발을 위한 브랜치들을 병합하기 위해 사용. 모든기능이 추가되고 버그가 수정되어 배포가능한 안정적 상태라면 develop 브랜치를 master 브랜치에 병합. 평소에는 이 브랜치를 기반으로 개발을 진행한다.&lt;/li&gt;
&lt;li&gt;feature : 새로운 기능 개발, 버그 수정이 필요할 때마다 ‘develop’ 브랜치로부터 분기. feature 브랜치의 작업은 기본적으로 공유 필요 없기 때문에 로컬 저장소에서 관리. 개발이 완료되면 ‘develop’ 브랜치로 병합하여 다른 사람들과 공유.&lt;/li&gt;
&lt;li&gt;release : 이번 출시 버전을 준비하는 배포 전용 브랜치. 배포 준비가 완료되면 master 브랜치에 병합. 배포 완료 후 develop 브랜치에도 병합. (release-RB_* 또는 release-* 또는 release/* 처럼 이름 짓는 것이 일반적인 관례)&lt;/li&gt;
&lt;li&gt;hotfix : 배포한 버전에 긴급하게 수정을 해야할 필요가 있을 경우, master 브랜치에서 분기. 바로 배포가 가능한 mater 브랜치에서 직접 브랜치를 만들어 필요한 부분만 수정한 후 다시 master 브랜치에 병합하여 배포.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이미지 출처 및 참고 : &lt;a href=&quot;https://gmlwjd9405.github.io/2018/05/11/types-of-git-branch.html&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://gmlwjd9405.github.io/2018/05/11/types-of-git-branch.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[크롤링..]]></title><description><![CDATA[깃허브 관련 명령어 정리]]></description><link>https://k904808.github.io//posts/2020_02_11</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_11</guid><pubDate>Tue, 11 Feb 2020 22:15:30 GMT</pubDate><content:encoded>&lt;h2 id=&quot;크롤링-삽질의-기록-🤬🤯&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%A4%EB%A7%81-%EC%82%BD%EC%A7%88%EC%9D%98-%EA%B8%B0%EB%A1%9D-%F0%9F%A4%AC%F0%9F%A4%AF&quot; aria-label=&quot;크롤링 삽질의 기록 🤬🤯 permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크롤링.. 삽질의 기록… 😠😡🤬🤯&lt;/h2&gt;
&lt;p&gt;크롤링에 앞서 가상환경을 만들고 활성화해준다.
miniconda를 기준으로, 새로운 가상환경은 아래 명령어로 만들 수 있다.
&lt;code class=&quot;language-text&quot;&gt;conda create -n 가상환경 이름 python=3.8&lt;/code&gt;
❗️ 파이썬 버전을 명시하지 않으면 자동으로 2.x 버전이 설치되므로 주의&lt;/p&gt;
&lt;p&gt;가상환경이 활성화 된 상태에서 bs4 request를 설치해준다.
&lt;code class=&quot;language-text&quot;&gt;pip install bs4, request&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;✔️ 동기님이 알려주신 가상환경 활성화 + 프로젝트 디렉토리 이동 꿀팁
&lt;img src=&quot;https://images.velog.io/images/k904808/post/cebfbf2f-21d2-41b1-873a-23d8412816f9/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-02-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.18.57.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;터미널에서 “scrap”이라는 명령어를 입력하면, scrap이라는 가상환경을 활성화 한 후 scrap 디렉토리로 이동하도록 설정해두었다. ‘.zshrc’ 에서 alias 이용해 원하는 명령어와 원하는 동작을 미리 설정해두는 방법. 진짜 편함.🤩&lt;/p&gt;
&lt;p&gt;다음으로, 프로젝트 디렉토리에 새로운 파일을 생성한다.
새로운 파일을 생성하는 방법은 크게 두 가지가 있다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;vi 새로운파일.py&lt;/code&gt; :
명령어를 입력하면 새로운파일 이름으로 에디터가 열린다.
그 화면에서 바로 편집하고 저장하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;touch 새로운파일.py&lt;/code&gt;:
새로운 파일이 생성된다.
에디터로 열어서 편집 후 저장하면 된다.&lt;/p&gt;
&lt;p&gt;새로운 파일에 request와 bs4를 import 해준다.
그리고 리퀘스트를 잘 찍어서 숩에 담아서 잘 가져온다. ㅋㅋㅋㅋ 말은 쉽다..ㅋㅋㅋㅋ&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import requests
from bs4 import BeautifulSoup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;req = requests.get(&amp;#39;https:// #크롤링할 url)

html = req.text                            #request를 텍스트 형식으로 바꿔줌

soup = BeautifulSoup(html, &amp;#39;html.parser&amp;#39;)  #텍스트를 사람이 보기좋은 상태로 가공해 줌.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;각 과정에서 데이터가 잘 따라오는지 알아보려면 print 해보는게 제일..&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/images/k904808/post/5a1dc8d3-3a65-48e7-b227-76b2212a7c6f/image.png&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;변수1 = soup.select(
	#개발자 도구를 통해 긁어온 css selector
)
변수2 = soup.select(
	#개발자 도구를 통해 긁어온 css selector
)
변수3 = soup.select(
	#개발자 도구를 통해 긁어온 css selector
)

빈_chart = []
for item in zip(변수1, 변수2, 변수3):
    빈_chart.append(
        {
            &amp;#39;변수1&amp;#39;  : item[0].text,
            &amp;#39;변수2&amp;#39;  : item[1].text,
            &amp;#39;변수3&amp;#39;: item[2].text,
        }
    )
    for i in 빈_chart:     #이제는 안 비었지만..
        print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 하면 크롤링 완료.
끝.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Github에 소스코드 올리기]]></title><description><![CDATA[깃허브 관련 명령어 정리]]></description><link>https://k904808.github.io//posts/2020_02_06</link><guid isPermaLink="false">https://k904808.github.io//posts/2020_02_06</guid><pubDate>Thu, 06 Feb 2020 18:14:15 GMT</pubDate><content:encoded>&lt;h3 id=&quot;git과-github&quot; style=&quot;position:relative;&quot;&gt;&lt;a href=&quot;#git%EA%B3%BC-github&quot; aria-label=&quot;git과 github permalink&quot; class=&quot;anchor before&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git과 Github&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Repository 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Github에 소스코드를 올리려면 먼저 github 홈페이지에서 repository를 생성해야 한다. 이때 생긴 repository를 remote repository라고 한다.&lt;/p&gt;
&lt;p&gt;내 pc에서 업로드할 소스코드가 있는 디렉토리로 이동한 뒤, 아래의 명령어로 local repository를 생성한다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git init&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;상태확인&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git status&lt;/code&gt;
명령어가 동작하지 않을 때 에러를 확인 할 수 있고, 작업한 파일 이외에 다른 파일이 수정되지 않았는지 확인할 수 있다.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;add&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git add .&lt;/code&gt;
하위 디렉토리에 있는 모든 변경 파일을 local repository에 추가하는 명령어.
” . ” 대신에 파일명을 입력하면 특정 파일을 추가할 수 있다.&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;commit 메세지 작성&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git commit -m &amp;quot;메세지내용&amp;quot;&lt;/code&gt;
-m은 한 줄로 간단하게 메세지를 작성할 때 사용하는 옵션.
긴 커밋메세지를 남길 경우에는 &lt;code class=&quot;language-text&quot;&gt;$git commit&lt;/code&gt; 명령어만 실행하면 된다.&lt;/p&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;remote repository 등록
&lt;code class=&quot;language-text&quot;&gt;$git remote add origin &amp;quot;remote repository 주소&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;연결상태를 확인하고 싶을 때는 아래 명령어를 입력하면 된다.
&lt;code class=&quot;language-text&quot;&gt;$git remote -v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;혹시 연결이 잘못 되었거나, 다른 remote repository로 변경하고 싶은 경우,
&lt;code class=&quot;language-text&quot;&gt;git remote set-url &amp;quot;변경할 이름&amp;quot; &amp;quot;새로운 url주소&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;push&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;$git push origin master&lt;/code&gt;
commit한 내용을 remote repository에 업로드 하는 것을 push한다고 한다.
master는 브랜치 이름이며, 다른 브랜치로 push하고 싶은 경우 master를 특정 브랜치 이름으로 바꿔서 실행하면 된다.&lt;/p&gt;
&lt;p&gt;새로운 브랜치 생성
&lt;code class=&quot;language-text&quot;&gt;$git branch &amp;quot;생성할 브랜치 이름&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;브랜치 이동
&lt;code class=&quot;language-text&quot;&gt;$git checkout &amp;quot;브랜치 이름&amp;quot;&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;push의 반대 개념으로 &lt;code class=&quot;language-text&quot;&gt;$git clone &amp;quot;repository 주소&amp;quot;&lt;/code&gt;를 통해 원하는 파일을 다운로드 할 수도 있다.&lt;/p&gt;</content:encoded></item></channel></rss>