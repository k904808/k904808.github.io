<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kay Log]]></title><description><![CDATA[:)]]></description><link>https://k904808.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 10 Feb 2020 10:45:52 GMT</lastBuildDate><item><title><![CDATA[깃허브와 친해지려 노력중]]></title><description><![CDATA[깃허브 관련 명령어 정리]]></description><link>https://k904808.github.io//posts/hello_git_hub</link><guid isPermaLink="false">https://k904808.github.io//posts/hello_git_hub</guid><pubDate>Thu, 06 Feb 2020 19:48:09 GMT</pubDate><content:encoded>&lt;h3&gt;깃허브와 친해지려 노력중&lt;/h3&gt;
&lt;p&gt;깃허브 블로그를 만들었는데 아직 사용방법이 익숙치 않아 블로깅이 점점 더 게을러졌다.
마크다운도 낯설기만 하다. ㅎㅎ 쓰다보면 언젠간 익숙해지겠지..?
&lt;br&gt;
테마에 포함되어있는 외쿡 아저씨 이미지도 내려드리고 이것저것 해보고 싶은데 아직은 엄두가 안난다. ㅎ
다음주에 꼭 해봐야지. ;)
요즘 한꺼번에 너무 많은 것을 배우고 정리해야하고 하고싶은 것 해야하는 것도 많고 시간이 부족하다.
시간을 좀더 효율적으로 쓸 수 있는 방법을 고민해봐야겠다.
&lt;br&gt;
이제 tmi는 그만하고 깃허브에 대한 기본적인 개념, 블로그를 만들면서 썼던 명령어들을 정리해봐야지.
&lt;/p&gt;
&lt;h3&gt;git과 git hub&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;git : 버전관리 툴&lt;/li&gt;
&lt;li&gt;git hub: 웹에 소스코드를 올려서 공유하는 곳&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Github에 소스코드를 올리려면 먼저 github 홈페이지에서 repository를 생성해야 한다.
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;업로드할 디렉토리로 이동한다.
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;local repository 생성.
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git init&lt;/code&gt;
&lt;br&gt;
이때 .git 디렉토리가 생성되는데 혹시 이후 과정에 문제가 생긴 경우 .git 디렉토리를 삭제한 후 다시 시도해보는 것이 해결방법이 될 수 있다.
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;상태확인
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git status&lt;/code&gt;
&lt;br&gt;
명령어가 동작하지 않을 때 에러를 확인 할 수 있고,
작업한 파일 이외에 다른 파일이 수정되지 않았는지 확인할 수 있다.
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;add
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git add .&lt;/code&gt;
&lt;br&gt;
하위 디렉토리에 있는 모든 변경 파일을 local repository에 추가하는 명령어.
. 대신에 파일명을 입력하면 특정 파일을 추가할 수 있다.
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;commit 메세지 작성
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git commit -m &amp;quot;메세지내용&amp;quot;&lt;/code&gt;
&lt;br&gt;
-m은 한 줄로 간단하게 메세지를 작성할 때 사용하는 옵션으로, 긴 커밋메세지를 남길 경우에는
&lt;code class=&quot;language-text&quot;&gt;$git commit&lt;/code&gt; 명령어만 실행하면 된다.
&lt;br&gt;
7.remote repository 등록
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git remote add origin &amp;quot;remote repository 주소&amp;quot;&lt;/code&gt;
&lt;br&gt;
연결상태를 확인하고 싶을 때는 아래 명령어를 입력하면 된다.
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git remote -v&lt;/code&gt;
&lt;br&gt;
혹시 연결이 잘못 되었거나, 다른 remote repository로 변경하고 싶은 경우에는 아래 명령어 입력.
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;git remote set-url &amp;quot;변경할 이름&amp;quot; &amp;quot;새로운 url주소&amp;quot;&lt;/code&gt;
&lt;br&gt;&lt;/li&gt;
&lt;li&gt;push
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git push origin master&lt;/code&gt;
&lt;br&gt;
commit한 내용을 remote repository에 업로드 하는 것을 push한다고 한다.
master는 브랜치 이름이며, 다른 브랜치로 push하고 싶은 경우 master를 특정 브랜치 이름으로 바꿔서 실행하면 된다.
&lt;br&gt;
새로운 브랜치 생성
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git branch &amp;quot;생성할 브랜치 이름&lt;/code&gt;
&lt;br&gt;
브랜치 이동
&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;$git checkout &amp;quot;브랜치 이름&lt;/code&gt;
&lt;br&gt;
push의 반대 개념으로 &lt;code class=&quot;language-text&quot;&gt;$git clone &amp;quot;repository 주소&amp;quot;&lt;/code&gt;를 통해 원하는 파일을 다운로드 할 수도 있다.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Hello-World]]></title><description><![CDATA[hello_world. my first blog posting]]></description><link>https://k904808.github.io//posts/hello_world_gatsby</link><guid isPermaLink="false">https://k904808.github.io//posts/hello_world_gatsby</guid><pubDate>Wed, 05 Feb 2020 23:15:32 GMT</pubDate><content:encoded>&lt;p&gt;Hello World!
&lt;br&gt;
&lt;br&gt;
This is my first blog posting.
&lt;br&gt;
Have a good night every one. :)&lt;/p&gt;</content:encoded></item></channel></rss>