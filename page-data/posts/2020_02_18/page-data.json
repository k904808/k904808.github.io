{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2020_02_18","result":{"data":{"markdownRemark":{"id":"ccb3d658-5ca2-5322-8e3a-92ca58713afa","html":"<p>지난 2월에 <a href=\"https://velog.io/@k904808/RESTful-API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RESTful API에 대해 정리</a>해 보았었는데, 다시 읽어보니 RESTful API에 대한 이해없이 개념만 나열해둔 정리였다. 😭\n<a href=\"https://evan-moon.github.io/2020/04/07/about-restful-api/?fbclid=IwAR3sbk8REMXfwP8UpNCiSfk91LZxL4dWwL3c72OW_umetAPM90A9aObmYfI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">좋은 자료</a>가 있어 차분하게 읽어보고 나름대로 정리해보았다.</p>\n<blockquote>\n<p><strong>좋은 API란? **\n어떠한 정보도 없는 누군가가, 구구절절 설명없이 엔드포인트만 봐도 어떤 동작을 하는 API인지 바로 이해할 수 있을 정도로 **정의가 직관적이고 명확한 API</strong>.</p>\n</blockquote>\n<p>이를 위한 <strong>API 아키텍쳐 가이드라인이 REST</strong>이며, 2000년에 로이 필딩(Roy Fielding)이 소개한 이후 20년이 지난 현재도 널리 사용되고 있다.</p>\n<h3 id=\"rest란\" style=\"position:relative;\"><a href=\"#rest%EB%9E%80\" aria-label=\"rest란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST란?</h3>\n<p><strong>RE</strong>presentaional <strong>S</strong>tate <strong>T</strong>ransfer의 약자.\n즉, REST는 통신을 통해 자원의 표현된 상태를 주고받는 것에 대한 아키텍쳐 가이드 라인이다.</p>\n<p>REpresentaional State 란?\n= 대표적인 상태\n= 표현된 상태\n= 서버가 가지고 있는 리소스의 상태</p>\n<p><strong>원본 리소스는 데이터베이스에 저장된 하나의 로우로 존재한다.\n이를 그대로 넘겨줄 수 없으니 서버가 원본 리소스를 읽어와 클라이언트가 요청하는 ‘상태로 표현해주는 것’</strong></p>\n<h3 id=\"restful-api란\" style=\"position:relative;\"><a href=\"#restful-api%EB%9E%80\" aria-label=\"restful api란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API란?</h3>\n<p>프론트엔드와 백엔드가 소통하는 엔드포인트</p>\n<p>리소스의 표현 상태만으로는 서버에서 어떤 일이 발생하는지 알기 어렵다.\n때문에, RESTful API에서는 <strong>REST 아키텍쳐를 통해 표현된 리소스와 더불어 어떠한 행위인지 명시할 수 있는 HTTP 메소드와 URI를 활용한다.</strong> </p>\n<h3 id=\"restful-api의-세가지-요소\" style=\"position:relative;\"><a href=\"#restful-api%EC%9D%98-%EC%84%B8%EA%B0%80%EC%A7%80-%EC%9A%94%EC%86%8C\" aria-label=\"restful api의 세가지 요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API의 세가지 요소</h3>\n<blockquote>\n<p><strong>REST</strong> : 리소스가 어떻게 표현되는지?\nex) Accept: application/json</p>\n</blockquote>\n<blockquote>\n<p><strong>URI</strong>  : 어떤 리소스인지?\nex) /api/users/1</p>\n</blockquote>\n<blockquote>\n<p><strong>HTTP 메소드</strong> : 어떤 행위인지?\nex) GET</p>\n</blockquote>\n<p>아래와 같이 클라이언트가 서버에게 요청을 보내고 응답을 받았다고 해보자.\n-> <strong>1번 유저의 정보를 가져오는 API겠구나 하고 추측할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET http://localhost:8000/api/users/1\nHost : localhost:8000\nAccept: application/json</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP/1.1 200 OK\nContent-Length: 18\nContent-Type: application/json\n\n{\n\tid   : 1,\n    \tname : &#39;Kay&#39;\n\n}</code></pre></div>\n<h3 id=\"️여기에서-user-가-아닌-users-이유는\" style=\"position:relative;\"><a href=\"#%EF%B8%8F%EC%97%AC%EA%B8%B0%EC%97%90%EC%84%9C-user-%EA%B0%80-%EC%95%84%EB%8B%8C-users-%EC%9D%B4%EC%9C%A0%EB%8A%94\" aria-label=\"️여기에서 user 가 아닌 users 이유는 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>✔️<strong>여기에서, user 가 아닌 users 이유는?</strong></h3>\n<p>유저라는 리소스가 특정한 하나의 객체가 아니기 때문</p>\n<p>’ / 고유한 ID’ 를 이용해 리소스의 계층을 표현하며 특정 유저를 표현할 수 있다.</p>\n<h3 id=\"️uri에는-행위가-표현되면-안된다\" style=\"position:relative;\"><a href=\"#%EF%B8%8Furi%EC%97%90%EB%8A%94-%ED%96%89%EC%9C%84%EA%B0%80-%ED%91%9C%ED%98%84%EB%90%98%EB%A9%B4-%EC%95%88%EB%90%9C%EB%8B%A4\" aria-label=\"️uri에는 행위가 표현되면 안된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>❗️<strong>URI에는 행위가 표현되면 안된다</strong></h3>\n<p>ex) POST /users/2/delete\n가이드라인에 어긋남</p>\n<p>권장사항은, <strong>URI가 가지는 의미는 철저히 어떤 리소스인지, 그리고 리소스의 계층 구조에 대한 것 뿐이어야함</strong>\nex) DELETE /users/2</p>\n<p>참고 :\n<a href=\"https://evan-moon.github.io/2020/04/07/about-restful-api/?fbclid=IwAR3sbk8REMXfwP8UpNCiSfk91LZxL4dWwL3c72OW_umetAPM90A9aObmYfI\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://evan-moon.github.io/2020/04/07/about-restful-api/?fbclid=IwAR3sbk8REMXfwP8UpNCiSfk91LZxL4dWwL3c72OW_umetAPM90A9aObmYfI</a></p>","fields":{"slug":"/posts/2020_02_18","tagSlugs":["/tag/rest/","/tag/res-tful-api/","/tag/web-development/"]},"frontmatter":{"date":"2020-02-18T18:30:10.169Z","description":"RESTful API","tags":["REST","RESTful API","Web Development"],"title":"RESTful API","socialImage":""}}},"pageContext":{"slug":"/posts/2020_02_18"}}}