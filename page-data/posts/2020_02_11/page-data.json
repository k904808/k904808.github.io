{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/2020_02_11","result":{"data":{"markdownRemark":{"id":"eb05b4e3-7d70-575d-a79c-e5f999c9df85","html":"<h2 id=\"크롤링-삽질의-기록-🤬🤯\" style=\"position:relative;\"><a href=\"#%ED%81%AC%EB%A1%A4%EB%A7%81-%EC%82%BD%EC%A7%88%EC%9D%98-%EA%B8%B0%EB%A1%9D-%F0%9F%A4%AC%F0%9F%A4%AF\" aria-label=\"크롤링 삽질의 기록 🤬🤯 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>크롤링.. 삽질의 기록… 😠😡🤬🤯</h2>\n<p>크롤링에 앞서 가상환경을 만들고 활성화해준다.\nminiconda를 기준으로, 새로운 가상환경은 아래 명령어로 만들 수 있다.\n<code class=\"language-text\">conda create -n 가상환경 이름 python=3.8</code>\n❗️ 파이썬 버전을 명시하지 않으면 자동으로 2.x 버전이 설치되므로 주의</p>\n<p>가상환경이 활성화 된 상태에서 bs4 request를 설치해준다.\n<code class=\"language-text\">pip install bs4, request</code></p>\n<p>✔️ 동기님이 알려주신 가상환경 활성화 + 프로젝트 디렉토리 이동 꿀팁\n<img src=\"https://images.velog.io/images/k904808/post/cebfbf2f-21d2-41b1-873a-23d8412816f9/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA%202020-02-11%20%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE%209.18.57.png\"></p>\n<p>터미널에서 “scrap”이라는 명령어를 입력하면, scrap이라는 가상환경을 활성화 한 후 scrap 디렉토리로 이동하도록 설정해두었다. ‘.zshrc’ 에서 alias 이용해 원하는 명령어와 원하는 동작을 미리 설정해두는 방법. 진짜 편함.🤩</p>\n<p>다음으로, 프로젝트 디렉토리에 새로운 파일을 생성한다.\n새로운 파일을 생성하는 방법은 크게 두 가지가 있다.</p>\n<p><code class=\"language-text\">vi 새로운파일.py</code> :\n명령어를 입력하면 새로운파일 이름으로 에디터가 열린다.\n그 화면에서 바로 편집하고 저장하면 된다.</p>\n<p><code class=\"language-text\">touch 새로운파일.py</code>:\n새로운 파일이 생성된다.\n에디터로 열어서 편집 후 저장하면 된다.</p>\n<p>새로운 파일에 request와 bs4를 import 해준다.\n그리고 리퀘스트를 잘 찍어서 숩에 담아서 잘 가져온다. ㅋㅋㅋㅋ 말은 쉽다..ㅋㅋㅋㅋ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import requests\nfrom bs4 import BeautifulSoup</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">req = requests.get(&#39;https:// #크롤링할 url)\n\nhtml = req.text                            #request를 텍스트 형식으로 바꿔줌\n\nsoup = BeautifulSoup(html, &#39;html.parser&#39;)  #텍스트를 사람이 보기좋은 상태로 가공해 줌.</code></pre></div>\n<p>각 과정에서 데이터가 잘 따라오는지 알아보려면 print 해보는게 제일..</p>\n<p><img src=\"https://images.velog.io/images/k904808/post/5a1dc8d3-3a65-48e7-b227-76b2212a7c6f/image.png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">변수1 = soup.select(\n\t#개발자 도구를 통해 긁어온 css selector\n)\n변수2 = soup.select(\n\t#개발자 도구를 통해 긁어온 css selector\n)\n변수3 = soup.select(\n\t#개발자 도구를 통해 긁어온 css selector\n)\n\n빈_chart = []\nfor item in zip(변수1, 변수2, 변수3):\n    빈_chart.append(\n        {\n            &#39;변수1&#39;  : item[0].text,\n            &#39;변수2&#39;  : item[1].text,\n            &#39;변수3&#39;: item[2].text,\n        }\n    )\n    for i in 빈_chart:     #이제는 안 비었지만..\n        print(i)</code></pre></div>\n<p>이렇게 하면 크롤링 완료.\n끝.</p>","fields":{"slug":"/posts/2020_02_11","tagSlugs":["/tag/git-hub/","/tag/gatsby/","/tag/web-development/"]},"frontmatter":{"date":"2020-02-11T22:15:30.169Z","description":"깃허브 관련 명령어 정리","tags":["git_hub","gatsby","Web Development"],"title":"크롤링..","socialImage":""}}},"pageContext":{"slug":"/posts/2020_02_11"}}}